/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainForm.java
 *
 * Created on 27-Feb-2009, 10:58:59
 */
package uk.co.mevanspn.imgext;

import java.awt.image.BufferedImage;
import javax.swing.JFileChooser;
import javax.imageio.ImageIO;
import java.io.*;
import uk.co.mevanspn.gui.ImageZoomListener;
import uk.co.mevanspn.gui.ZoomManager;

/**
 *
 * @author morganevans
 */
public class MainForm extends javax.swing.JFrame implements ImageZoomListener {

    /** Creates new form MainForm */
    public MainForm() {
        initComponents();
        changeStatus();
    }

    private void changeStatus() {
        BufferedImage im = ippSource.getImage();
        if (im != null) {
            int image_dims = im.getWidth() * im.getHeight();
            int source_size = image_dims * 3;
            int block_count = image_dims / (getBx() * getBy());
            int lum_data_size = (int) Math.ceil(((getLumBits() * image_dims) + (8 * block_count)) / 8f);
            int CbDiffBits = getBitLength(b.getCbDiff(8 - getChrBits()));
            int CrDiffBits = getBitLength(b.getCrDiff(8 - getChrBits()));

            int chr_data_size = (int) Math.ceil(((getChrBits() * 2) +
                    (CbDiffBits * block_count) + (CrDiffBits * block_count)) / 8f);
            int comp_size = lum_data_size + chr_data_size;
            int comp_ratio = (int) (((float) comp_size / (float) source_size) * 100);
            lblStatus.setText("Source (Bytes):" + source_size + " : Output (Bytes):" +
                    comp_size + " : Comp. Ratio:" + comp_ratio + "%");
        } else {
            lblStatus.setText("No Image Loaded");
        }
    }

    private int getBitLength(int _value) {
        int bit_value = 1;
        int i;
        for (i = 1; i < 8 && _value > bit_value; i++) {
            bit_value += 1 << i;
        }
        return i;
    }

    private int getLumBits() {
        return sldLumBits.getValue();
    }

    private int getChrBits() {
        return sldChrBits.getValue();
    }

    private int getBx() {
        return sldBx.getValue();
    }

    private int getBy() {
        return sldBy.getValue();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbMain = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        sldLumBits = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        sldChrBits = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        sldBx = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        sldBy = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        cmbZoom = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        try {
            ippSource = new uk.co.mevanspn.gui.ImagePreviewPanel();
        } catch (Exception e1) {
            e1.printStackTrace();
       	}
        try {
            ippOutput = new uk.co.mevanspn.gui.ImagePreviewPanel();
        } catch (Exception e1) {
            e1.printStackTrace();
        }
        pnlStatus = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        mbMain = new javax.swing.JMenuBar();
        mnuFIle = new javax.swing.JMenu();
        mniOpen = new javax.swing.JMenuItem();
        mniSave = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        mniQuit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Compression Demo - By Morgan Evans");
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        tbMain.setRollover(true);
        tbMain.setEnabled(false);
        tbMain.setMaximumSize(new java.awt.Dimension(32767, 71));

        jLabel1.setText("Y Bits:");
        tbMain.add(jLabel1);

        sldLumBits.setMajorTickSpacing(1);
        sldLumBits.setMaximum(8);
        sldLumBits.setMinimum(1);
        sldLumBits.setMinorTickSpacing(1);
        sldLumBits.setPaintLabels(true);
        sldLumBits.setPaintTicks(true);
        sldLumBits.setSnapToTicks(true);
        sldLumBits.setToolTipText("Sets Bits per Luminance Value.  Too low a value will produce noticable banding.");
        sldLumBits.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lumBitsChanged(evt);
            }
        });
        tbMain.add(sldLumBits);

        jLabel2.setText("CrCb Bits:");
        tbMain.add(jLabel2);

        sldChrBits.setMajorTickSpacing(1);
        sldChrBits.setMaximum(8);
        sldChrBits.setMinimum(1);
        sldChrBits.setMinorTickSpacing(1);
        sldChrBits.setPaintLabels(true);
        sldChrBits.setPaintTicks(true);
        sldChrBits.setSnapToTicks(true);
        sldChrBits.setToolTipText("Sets Bits for Cr and Cb values.  Too low a value will produce inaccurate representation of colours.");
        sldChrBits.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chrBitsChanged(evt);
            }
        });
        tbMain.add(sldChrBits);

        jLabel3.setText("CrCb Width:");
        tbMain.add(jLabel3);

        sldBx.setMajorTickSpacing(1);
        sldBx.setMaximum(8);
        sldBx.setMinimum(1);
        sldBx.setMinorTickSpacing(1);
        sldBx.setPaintLabels(true);
        sldBx.setPaintTicks(true);
        sldBx.setSnapToTicks(true);
        sldBx.setToolTipText("Defines the width of each YCrCb block.  Larger values may produce noticable blocks where there are areas of contrasting colour.");
        sldBx.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                blockWidthChanged(evt);
            }
        });
        tbMain.add(sldBx);

        jLabel4.setText("CrCb Height:");
        tbMain.add(jLabel4);

        sldBy.setMajorTickSpacing(1);
        sldBy.setMaximum(8);
        sldBy.setMinimum(1);
        sldBy.setMinorTickSpacing(1);
        sldBy.setPaintLabels(true);
        sldBy.setPaintTicks(true);
        sldBy.setSnapToTicks(true);
        sldBy.setToolTipText("Defines the height of each YCrCb block.  Larger values may produce noticable blocks where there are areas of contrasting colour");
        sldBy.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                blockHeightChanged(evt);
            }
        });
        tbMain.add(sldBy);

        jLabel5.setText("Zoom:");
        tbMain.add(jLabel5);

        cmbZoom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "25%", "50%", "100%", "200%", "300%", "400%", "500%", "600%", "700%", "800%" }));
        cmbZoom.setToolTipText("Sets the zoom level for both images.");
        cmbZoom.setEnabled(false);
        cmbZoom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                zoomChanged(evt);
            }
        });
        tbMain.add(cmbZoom);

        getContentPane().add(tbMain);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        ippSource.setWheelZoomEnabled(true);
        ippSource.addImageZoomListener(this);
        jPanel1.add(ippSource);

        ippOutput.setWheelZoomEnabled(true);
        ippOutput.addImageZoomListener(this);
        jPanel1.add(ippOutput);

        getContentPane().add(jPanel1);

        pnlStatus.setMaximumSize(new java.awt.Dimension(32767, 25));

        lblStatus.setText("Source (KB):  Output (KB):  Comp. Ratio: 100%");
        pnlStatus.add(lblStatus);

        getContentPane().add(pnlStatus);

        mnuFIle.setText("File");

        mniOpen.setText("Open File...");
        mniOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImageFile(evt);
            }
        });
        mnuFIle.add(mniOpen);

        mniSave.setText("Save Ouput...");
        mniSave.setEnabled(false);
        mniSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageFile(evt);
            }
        });
        mnuFIle.add(mniSave);
        mnuFIle.add(jSeparator1);

        mniQuit.setText("Quit");
        mnuFIle.add(mniQuit);

        mbMain.add(mnuFIle);

        setJMenuBar(mbMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void openImageFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImageFile
            JFileChooser chsr = new JFileChooser();
            chsr.setFileFilter(new ImageFileFilter());
            int choice = chsr.showOpenDialog(this);

            if (choice == JFileChooser.APPROVE_OPTION) {
                try {
                    File f = chsr.getSelectedFile();
                    if (f != null) {
                        BufferedImage source = ImageIO.read(f);
                        ippSource.setImage(source);
                        createOutputImage(source);
                        ippSource.setZoom(100);
                        ippOutput.setZoom(100);
                        mniSave.setEnabled(true);
                        cmbZoom.setEnabled(true);
                        changeStatus();
                    }
                } catch (IOException ioex) {
                    ioex.printStackTrace();
                }
            }
	}//GEN-LAST:event_openImageFile

	private void lumBitsChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lumBitsChanged
            int lum_bits = getLumBits();
            int chr_bits = getChrBits();
            int bx_size = getBx();
            int by_size = getBy();
            if (ippSource.getImage() != null && lum_bits != last_lum_bits) {
                createOutputImage(ippSource.getImage());
                changeStatus();
                last_lum_bits = lum_bits;
            }
	}//GEN-LAST:event_lumBitsChanged

	private void chrBitsChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chrBitsChanged
            int lum_bits = getLumBits();
            int chr_bits = getChrBits();
            int bx_size = getBx();
            int by_size = getBy();
            if (ippSource.getImage() != null && chr_bits != last_chr_bits) {
                createOutputImage(ippSource.getImage());
                changeStatus();
                last_chr_bits = chr_bits;
            }
	}//GEN-LAST:event_chrBitsChanged

	private void blockWidthChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_blockWidthChanged
            int lum_bits = getLumBits();
            int chr_bits = getChrBits();
            int bx_size = getBx();
            int by_size = getBy();
            if (ippSource.getImage() != null && bx_size != last_Bx) {
                createOutputImage(ippSource.getImage());
                changeStatus();
                last_Bx = bx_size;
            }
	}//GEN-LAST:event_blockWidthChanged

	private void blockHeightChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_blockHeightChanged
            int lum_bits = getLumBits();
            int chr_bits = getChrBits();
            int bx_size = getBx();
            int by_size = getBy();
            if (ippSource.getImage() != null && by_size != last_By) {
                createOutputImage(ippSource.getImage());
                changeStatus();
                last_By = by_size;
            }
	}//GEN-LAST:event_blockHeightChanged

	private void saveImageFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageFile
            if (ippSource.getImage() != null) {
                JFileChooser chsr = new JFileChooser();

                chsr.setFileFilter(new ImageFileFilter());
                int choice = chsr.showSaveDialog(this);

                if (choice == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = chsr.getSelectedFile();
                        if (f != null) {
                            String filename = f.getName().toLowerCase();
                            if (filename.endsWith(".jpg")) {
                                ImageIO.write(ippOutput.getImage(), "jpeg", f);
                            }
                            if (filename.endsWith(".png")) {
                                ImageIO.write(ippOutput.getImage(), "png", f);
                            }
                        }
                    } catch (IOException ioex) {
                        ioex.printStackTrace();
                    }
                }
            }
	}//GEN-LAST:event_saveImageFile

	private void createOutputImage(BufferedImage _source) {
		if (b != null && b.isAlive()) {
            b.interrupt();
        }
        b = new Bitmap(_source, ippOutput);
        b.getCompressPreview(getLumBits(), getChrBits(), 
        						getBx(), getBy());
    }
	
	private void zoomChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_zoomChanged
            String str_zoom = (String) cmbZoom.getSelectedItem();
            str_zoom = str_zoom.substring(0, str_zoom.length() - 1);
            ippSource.setZoom(Float.parseFloat(str_zoom));
	}//GEN-LAST:event_zoomChanged

    // Some control variable to stop excessive heap usage.
    private int last_lum_bits = 8, last_chr_bits = 8, last_Bx = 8, last_By = 8;
    private Bitmap b;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbZoom;
    private uk.co.mevanspn.gui.ImagePreviewPanel ippOutput;
    private uk.co.mevanspn.gui.ImagePreviewPanel ippSource;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JMenuBar mbMain;
    private javax.swing.JMenuItem mniOpen;
    private javax.swing.JMenuItem mniQuit;
    private javax.swing.JMenuItem mniSave;
    private javax.swing.JMenu mnuFIle;
    private javax.swing.JPanel pnlStatus;
    private javax.swing.JSlider sldBx;
    private javax.swing.JSlider sldBy;
    private javax.swing.JSlider sldChrBits;
    private javax.swing.JSlider sldLumBits;
    private javax.swing.JToolBar tbMain;
    // End of variables declaration//GEN-END:variables

    public void zoomChanged(float _new_zoom, ZoomManager _sender) {
        if (_sender == ippSource && ippOutput.getZoom() != _new_zoom) {
            ippOutput.setZoom(_new_zoom);
        }

        if (_sender == ippOutput && ippSource.getZoom() != _new_zoom) {
            ippSource.setZoom(_new_zoom);
        }
    }
}
